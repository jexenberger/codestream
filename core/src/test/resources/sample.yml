group: test-group
stream: echo-saying
desc: A test stream
inputs:

  - saying:
      prompt: Enter saying
      type: string
      required: true

  - environment:
      prompt: Enter the environment you want to install Hazelcast onto
      allowedValues: uat, pre-prod, prod
      default: uat
      required: true

tasks:

  - stream:
      id: run-a-stream
      path: src/test/resources/nested.yml
      inputParameters:
        saying: hello world nested stream

  - set:
      id: my-funky-executable
      outputVar: aTestVariable
      value: hello world
      varType: string

  - foreach:
      items: hello, world, from, us
      currentValue: test
      tasks:
        - echo:
            value: ${'VALUE -> ' + test}


  - group:
      id: run-some-random-io
      tasks:
        - io::mkdirs:
            dir: target/hello_world
        - io::write:
            file: target/hello_world/written.output
            content: ${aTestVariable}
        - sleep:
            duration: 1000
        - io::read:
            src: target/hello_world/written.output
            outputVar: fileContent
        - echo:
            value: ${fileContent}
        - io::delete:
            src: target/hello_world

  - async:
      tasks:
        - echo:
            value: hello 1
        - echo:
            value: hello 2
        - echo:
            value: hello 3

  - group:
      tasks:
        - template::basepath:
            basePath: src/test/resources
        - set:
            outputVar: hello
            value: world
        - template::render:
            template: test
            outputVar: myCoolTemplateResult
        - io::mkdirs:
            dir: target/hello_world
        - template::renderfile:
            template: test
            target: target/hello_world/myfile.out
        - io::delete:
            src: target/hello_world
        - echo:
            value: ${'TEMPLATE -> ' + myCoolTemplateResult}

  - group:
      tasks:
        - set:
            outputVar: subCnt
            varType: int
            value: 0
        - while:
            condition: subCnt < 5
            tasks:
              - script:
                  script: subCnt + 1
                  outputVar: subCnt
              - echo:
                  value: ${'ASYNC ->' + subCnt}
              - sleep:
                  duration: 1000

  - set:
      outputVar: cnt
      value: 0
      varType: int

  - while:
      condition: cnt < 5
      tasks:
        - script:
            script: cnt + 1
            outputVar: cnt
        - echo:
            value: ${'cnt => ' + cnt}

  - echo:
      value: ${saying + ' ' + aTestVariable}

  - group:
      id: randomly-echo-a-bunch-of-stuff
      tasks:
        - echo:
            value: ${saying + ' ' + aTestVariable}
        - echo:
            value: ${saying + ' ' + aTestVariable}


